buildscript {
    repositories {
        // These repositories are only for Gradle plugins, put any other repositories in the repository block further below
        maven { url = 'https://maven.minecraftforge.net' }
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '5.1.+', changing: true
    }
}
apply plugin: 'net.minecraftforge.gradle'

group = 'com.mcf.davidee.nbtedit'
version = '1.16.5-2.0.1'

java {
    withSourcesJar()
    archivesBaseName = 'NBTEdit'
    toolchain.languageVersion = JavaLanguageVersion.of(8)
}

minecraft {
    mappings channel: 'official', version: '1.16.5'

    accessTransformer = file('src/main/resources/META-INF/accesstransformer.cfg')

    runs {
        client {
            workingDirectory project.file('run_client')
            mods {
                nbtedit {
                    source sourceSets.main
                }
            }
        }

        server {
            workingDirectory project.file('run_server')
            mods {
                nbtedit {
                    source sourceSets.main
                }
            }
        }

        data {
            workingDirectory project.file('run_data')
            // Specify the modid for data generation, where to output the resulting resource, and where to look for existing resources.
            args '--mod', 'nbtedit', '--all', '--output', file('src/generated/resources/'), '--existing', file('src/main/resources/')

            mods {
                nbtedit {
                    source sourceSets.main
                }
            }
        }
    }
}

// Include resources generated by data generators.
sourceSets.main.resources { srcDir 'src/generated/resources' }

repositories {
}

dependencies {
    minecraft 'net.minecraftforge:forge:1.16.5-36.2.35'
}

// Example for how to get properties into the manifest for reading at runtime.
jar {
    manifest {
        attributes([
                'Specification-Title'     : 'nbtedit',
                'Specification-Vendor'    : 'Jay113355',
                'Specification-Version'   : '1', // We are version 1 of ourselves
                'Implementation-Title'    : project.name,
                'Implementation-Version'  : project.jar.archiveVersion,
                'Implementation-Vendor'   : 'Jay113355',
                'Implementation-Timestamp': new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")
        ])
    }
}

task deobfJar(type: Jar) { // Generate deobfuscated
    from sourceSets.main.output
    classifier = 'deobf'
}

artifacts {
    sourcesJar
    deobfJar
}

tasks.withType(JavaCompile).configureEach {
    options.encoding = 'UTF-8' // Use the UTF-8 charset for Java compilation
}

jar.finalizedBy('reobfJar', 'deobfJar')
